-- VHDL CODE by Gerry O'Brien - HD44780 LCD Controller STATE_MACHINE
--==================================================--
--
-- VHDL Architecture DE2_LCD_lib.LCD_DISPLAY_nty.LCD_DISPLAY_arch
--
-- Created:
--          by - Gerry O'Brien 
--          WWW.DIGITAL-CIRCUITRY.COM
--          at - 15:30:18 26/03/2015
--
-- using Mentor Graphics HDL Designer(TM) 2010.3 (Build 21)
--
LIBRARY IEEE;
USE  IEEE.STD_LOGIC_1164.all;
USE  IEEE.STD_LOGIC_ARITH.all;
--USE  IEEE.STD_LOGIC_UNSIGNED.all;
--USE  IEEE.numeric_std.all;
Library work;


ENTITY test13 IS
   GENERIC( 
      num_hex_digits 				: integer := 2;
      N									: integer := 200
		);
   
   PORT( 
      
		reset              : IN     std_logic;  -- Map this Port to a Switch within your [Port Declarations / Pin Planer]  
      clock_50           : IN     std_logic;  -- Using the DE2 50Mhz Clk, in order to Genreate the 400Hz signal... clk_count_400hz reset count value must be set to:  <= x"0F424"
      
		
      lcd_rs             : OUT    std_logic;
      lcd_e              : OUT    std_logic;
      lcd_rw             : OUT    std_logic;
      lcd_on             : OUT    std_logic;
      
      data_bus_0         : INOUT  STD_LOGIC;
      data_bus_1         : INOUT  STD_LOGIC;
      data_bus_2         : INOUT  STD_LOGIC;
      data_bus_3         : INOUT  STD_LOGIC;
      data_bus_4         : INOUT  STD_LOGIC;
      data_bus_5         : INOUT  STD_LOGIC;
      data_bus_6         : INOUT  STD_LOGIC;
      data_bus_7         : INOUT  STD_LOGIC;
      
      LCD_CHAR_ARRAY_0    : IN    STD_LOGIC;
      LCD_CHAR_ARRAY_1    : IN    STD_LOGIC;
      LCD_CHAR_ARRAY_2    : IN    STD_LOGIC;
      LCD_CHAR_ARRAY_3    : IN    STD_LOGIC;
      
      Hex_Display_Data_0 : IN     STD_LOGIC;
      Hex_Display_Data_1 : IN     STD_LOGIC;
      Hex_Display_Data_2 : IN     STD_LOGIC;
      Hex_Display_Data_3 : IN     STD_LOGIC;
      Hex_Display_Data_4 : IN     STD_LOGIC;
      Hex_Display_Data_5 : IN     STD_LOGIC;
      Hex_Display_Data_6 : IN     STD_LOGIC;
      Hex_Display_Data_7 : IN     STD_LOGIC;
      
		maininput : IN  STD_LOGIC;
		LED1 		 : OUT STD_LOGIC;
		LED2 		 : OUT STD_LOGIC;
		LED3 		 : OUT STD_LOGIC;
		LED4 		 : OUT STD_LOGIC;
		LED5 		 : OUT STD_LOGIC;
		LED6 		 : OUT STD_LOGIC;
		LED7 		 : OUT STD_LOGIC;
		LED8 		 : OUT STD_LOGIC;
		LED9 		 : OUT STD_LOGIC;
		LED10		 : OUT STD_LOGIC;
		LED11		 : OUT STD_LOGIC;
		LED12		 : OUT STD_LOGIC;
		LED13		 : OUT STD_LOGIC;
		LED14		 : OUT STD_LOGIC;
		LED15		 : OUT STD_LOGIC;
		LED16		 : OUT STD_LOGIC;
		LED17		 : OUT STD_LOGIC;
		LED18		 : OUT STD_LOGIC
   
	);

-- Declarations

END test13;

--
ARCHITECTURE LCD_DISPLAY_arch OF test13 IS

COMPONENT sub3
	PORT(
	
	    delayEN : IN STD_LOGIC;
		 delayIN : IN STD_LOGIC;
		 ENOout : OUT STD_LOGIC;
		 INOout : OUT STD_LOGIC;
		 n16 : OUT STD_LOGIC;
		 n17 : OUT STD_LOGIC;
		 n18 : OUT STD_LOGIC;
		 n19 : OUT STD_LOGIC;
		 n13 : OUT STD_LOGIC;
		 n14 : OUT STD_LOGIC;
		 n15 : OUT STD_LOGIC;
		 n20 : OUT STD_LOGIC;
		 n21 : OUT STD_LOGIC;
		 n22 : OUT STD_LOGIC;
		 n6 : OUT STD_LOGIC;
		 n7 : OUT STD_LOGIC;
		 n8 : OUT STD_LOGIC;
		 n9 : OUT STD_LOGIC;
		 n3 : OUT STD_LOGIC;
		 n4 : OUT STD_LOGIC;
		 n5 : OUT STD_LOGIC;
		 n10 : OUT STD_LOGIC;
		 n11 : OUT STD_LOGIC;
		 n12 : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT delayelement
	PORT(delayinput : IN STD_LOGIC;
		 delayoutput : OUT STD_LOGIC
	);
END COMPONENT;

SIGNAL	SYNTHESIZED_WIRE_0 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_3 :  STD_LOGIC;

  type character_string is array ( 0 to 31 ) of STD_LOGIC_VECTOR( 7 downto 0 );

  type state_type is (hold, func_set, display_on, mode_set, print_string,
                      line2, return_home, drop_lcd_e, reset1, reset2,
                       reset3, display_off, display_clear);
                       
  signal state, next_command         : state_type;
  
  
  signal lcd_display_string          : character_string;
  signal lcd_display_string_01       : character_string;
  signal lcd_display_string_02       : character_string;
  signal lcd_display_string_03       : character_string;
  signal lcd_display_string_04       : character_string;
  signal lcd_display_string_05       : character_string;
  signal lcd_display_string_06       : character_string;
  signal lcd_display_string_07       : character_string;
  signal lcd_display_string_08       : character_string;
  signal lcd_display_string_09       : character_string;
  signal lcd_display_string_10       : character_string;
  signal lcd_display_string_11       : character_string;
  
  signal data_bus_value, next_char   : STD_LOGIC_VECTOR(7 downto 0);
  signal clk_count_400hz             : STD_LOGIC_VECTOR(19 downto 0);
  signal char_count                  : STD_LOGIC_VECTOR(4 downto 0);
  signal clk_400hz_enable,lcd_rw_int : std_logic;
  
  signal Hex_Display_Data            : STD_LOGIC_VECTOR(7 DOWNTO 0); 
  signal data_bus                    : STD_LOGIC_VECTOR(7 downto 0);    
  signal LCD_CHAR_ARRAY              : STD_LOGIC_VECTOR(3 DOWNTO 0);
  
  signal delay_counter					 : integer := 0;
  signal output_delay_counter			 : integer := 0;
  signal final_stage_detector			 : integer range 0 to 1;
  signal final_value						 : integer := 0;
  signal ready_for_decoding 			 : integer := 0;
  signal ready_for_stage_2 			 : integer range 0 to 1;
  signal ready_for_stage_3 			 : integer range 0 to 1;
  signal	final_value_converted_1 	 : integer := 0;
  signal final_value_converted_2 	 : integer := 0;
  signal final_value_converted_3 	 : integer := 0;
  signal getting_display_ready	 	 : integer := 0;
  signal LCD_Digit_1  		   	    : character_string;
  signal LCD_Digit_2   				    : character_string;
  signal LCD_Digit_3   	  			    : character_string;
  signal final_value_math 				 : integer := 0; 

BEGIN
  
SYNTHESIZED_WIRE_3 <= NOT(maininput);


b2v_inst18 : sub3
PORT MAP(
		 delayEN => SYNTHESIZED_WIRE_0,
		 delayIN => SYNTHESIZED_WIRE_3,
		 n16 => LED18,
		 n17 => LED17,
		 n18 => LED16,
		 n19 => LED15,
		 n13 => LED14,
		 n15 => LED13,
		 n21 => LED12,
		 n22 => LED11,
		 n6 => LED10,
		 n7 => LED9,
		 n8 => LED8,
		 n9 => LED7,
		 n3 => LED6,
		 n4 => LED5,
		 n5 => LED4,
		 n10 => LED3,
		 n11 => LED2,
		 n12 => LED1
		 );


b2v_inst2 : delayelement
PORT MAP(delayinput => SYNTHESIZED_WIRE_3,
		 delayoutput => SYNTHESIZED_WIRE_0);



--===================================================--  
-- SIGNAL STD_LOGIC_VECTORS assigned to OUTPUT PORTS 
--===================================================--    
Hex_Display_Data(0) <= Hex_Display_Data_0;
Hex_Display_Data(1) <= Hex_Display_Data_1;   
Hex_Display_Data(2) <= Hex_Display_Data_2;
Hex_Display_Data(3) <= Hex_Display_Data_3;  
Hex_Display_Data(4) <= Hex_Display_Data_4;
Hex_Display_Data(5) <= Hex_Display_Data_5;  
Hex_Display_Data(6) <= Hex_Display_Data_6;
Hex_Display_Data(7) <= Hex_Display_Data_7;  

data_bus_0 <= data_bus(0);
data_bus_1 <= data_bus(1);
data_bus_2 <= data_bus(2);
data_bus_3 <= data_bus(3);
data_bus_4 <= data_bus(4);
data_bus_5 <= data_bus(5);
data_bus_6 <= data_bus(6);
data_bus_7 <= data_bus(7);
    
LCD_CHAR_ARRAY(0) <= LCD_CHAR_ARRAY_0;
LCD_CHAR_ARRAY(1) <= LCD_CHAR_ARRAY_1;
LCD_CHAR_ARRAY(2) <= LCD_CHAR_ARRAY_2;
LCD_CHAR_ARRAY(3) <= LCD_CHAR_ARRAY_3;
--=====================================--



-------------------------------------------------------------------------------------------------------
-- BIDIRECTIONAL TRI STATE LCD DATA BUS
   data_bus <= data_bus_value when lcd_rw_int = '0' else "ZZZZZZZZ";
   
-- LCD_RW PORT is assigned to it matching SIGNAL 
 lcd_rw <= lcd_rw_int;
 

------------------------------------ STATE MACHINE FOR LCD SCREEN MESSAGE SELECT -----------------------------
---------------------------------------------------------------------------------------------------------------
PROCESS (LCD_CHAR_ARRAY)
BEGIN
  if output_delay_counter'event then
   delay_counter <= delay_counter + 1;
else   
   final_stage_detector <= final_stage_detector + 1;
end if;
 
-- If final stage detector has been tripped more than an arbitrary large number, then we can assume we have reached our final delay cell.
if final_stage_detector > 200000 then
   final_value <= delay_counter;
   ready_for_decoding <= 1;
end if;


-- If ready for decoding has been tripped, then we can convert the delay_counter value into bits for the LCD lookup conversion
if ready_for_decoding = 1 then

-- STAGE 1: Decode the integers into variables   
         final_value_math <= final_value;
         final_value_converted_1 <= final_value_math mod 100;
         final_value_converted_2 <= (final_value_math - final_value_converted_1*100) mod 10;
         final_value_converted_3 <= (final_value_math - final_value_converted_1*100 - final_value_converted_2*10); 
         ready_for_stage_2 <= 1;
-- STAGE 2: Convert the variables into LCD codes
-- If first digit is 0, we can replace it with x"20" for blank space, otherwise, use 0 with x"30"
  
   if getting_display_ready /= 3 and ready_for_stage_2 = 1 then
         if final_value_converted_1 = 0 then
         LCD_digit_1 <= x"20";
         elsif final_value_converted_1 = 1 then
         LCD_digit_1 <= x"31";
         elsif final_value_converted_1 = 2 then
         LCD_digit_1 <= x"32";
         elsif final_value_converted_1 = 3 then
         LCD_digit_1 <= x"33";
         elsif final_value_converted_1 = 4 then
         LCD_digit_1 <= x"34";
         elsif final_value_converted_1 = 5 then
         LCD_digit_1 <= x"35";
         elsif final_value_converted_1 = 6 then
         LCD_digit_1 <= x"36";
         elsif final_value_converted_1 = 7 then
         LCD_digit_1 <= x"37";
         elsif final_value_converted_1 = 8 then
         LCD_digit_1 <= x"38";
         elsif final_value_converted_1 = 9 then
         LCD_digit_1 <= x"39";
         end if;
         getting_display_ready <= getting_display_ready+1;
         
         if final_value_converted_2 = 0 then
         LCD_digit_2 <= x"30";
         elsif final_value_converted_2 = 1 then
         LCD_digit_2 <= x"31";
         elsif final_value_converted_2 = 2 then
         LCD_digit_2 <= x"32";
         elsif final_value_converted_2 = 3 then
         LCD_digit_2 <= x"33";
         elsif final_value_converted_2 = 4 then
         LCD_digit_2 <= x"34";
         elsif final_value_converted_2 = 5 then
         LCD_digit_2 <= x"35";
         elsif final_value_converted_2 = 6 then
         LCD_digit_2 <= x"36";
         elsif final_value_converted_2 = 7 then
         LCD_digit_2 <= x"37";
         elsif final_value_converted_2 = 8 then
         LCD_digit_2 <= x"38";
         elsif final_value_converted_2 = 9 then
         LCD_digit_2 <= x"39";
         end if;   
         getting_display_ready <= getting_display_ready+1;
         
         if final_value_converted_3 = 0 then
         LCD_digit_3 <= x"30";
         elsif final_value_converted_3 = 1 then
         LCD_digit_3 <= x"31";
         elsif final_value_converted_3 = 2 then
         LCD_digit_3 <= x"32";
         elsif final_value_converted_3 = 3 then
         LCD_digit_3 <= x"33";
         elsif final_value_converted_3 = 4 then
         LCD_digit_3 <= x"34";
         elsif final_value_converted_3 = 5 then
         LCD_digit_3 <= x"35";
         elsif final_value_converted_3 = 6 then
         LCD_digit_3 <= x"36";
         elsif final_value_converted_3 = 7 then
         LCD_digit_3 <= x"37";
         elsif final_value_converted_3 = 8 then
         LCD_digit_3 <= x"38";
         elsif final_value_converted_3 = 9 then
         LCD_digit_3 <= x"39";
         end if; 
         ready_for_stage_3 <= 1;
         getting_display_ready <= getting_display_ready+1;
   end if; 
   
-- STAGE 3: Prepare array for LCD Display String
if ready_for_stage_3 = 1 then
   time_measurement_display <= 
  (
-- Line 1               Digit 1  ,  Digit 2  ,  Digit 3           
          x"20",x"20",LCD_digit_1,LCD_digit_2,LCD_digit_3,x"20",x"20",x"20",x"20",x"20",x"20",x"20",x"20",x"20",x"20",x"20",
   
-- Line 2          D     e    l     a     y           C     e     l     l     s                                      
          x"20",x"44",x"65",x"6C",x"61",x"79",x"20",x"43",x"65",x"6C",x"6C",x"73",x"20",x"20",x"20",x"20"  
   ); 
display_ready <= 1;
end if;   

end if;    
   
-- If display_ready has been tripped, then we can push the converted integers onto the Display
if display_ready = 1 then
   lcd_display_string_01 <= time_measurement_display;
end if;
-- get next character in display string based on the LCD_CHAR_ARRAY (switches or Multiplexer)

     CASE (LCD_CHAR_ARRAY) IS
          
          -- Bluetooth Disconnected
       WHEN "0000" =>
            next_char <= lcd_display_string_01(CONV_INTEGER(char_count));
                                                                          
          -- Bluetooth Connected                                                                                         
       WHEN "0001" =>      
            next_char <= lcd_display_string_02(CONV_INTEGER(char_count));
            
            -- CHARGING %25
       WHEN "0010" =>      
            next_char <= lcd_display_string_03(CONV_INTEGER(char_count));                   
                                                                                                                              
                 --  BLUETOOTH CONTROLLER                                                                 
            WHEN OTHERS =>              
               next_char <= lcd_display_string_11(CONV_INTEGER(char_count));
                                                     
       END CASE;
END PROCESS;
   

--======================= CLOCK SIGNALS ============================--  
process(clock_50)
begin
      if (rising_edge(clock_50)) then
         if (reset = '0') then
            clk_count_400hz <= x"00000";
            clk_400hz_enable <= '0';
         else
            if (clk_count_400hz <= x"0F424") then          -- If using the DE2 50Mhz Clock,  use clk_count_400hz <= x"0F424"  (50Mhz/400hz = 12500 converted to HEX = 0F424 )   
                   clk_count_400hz <= clk_count_400hz + 1; --  In Theory for a 27Mhz Clock,  use clk_count_400hz <= x"01A5E"  (27Mhz/400hz = 6750  converted to HEX = 01A5E )                                       
                   clk_400hz_enable <= '0';                --  In Theory for a 25Mhz Clock.  use clk_count_400hz <= x"0186A"  (25Mhz/400hz = 6250  converted to HEX = 0186A )
            else
                   clk_count_400hz <= x"00000";
                   clk_400hz_enable <= '1';
            end if;
         end if;
      end if;
end process;  
--==================================================================--    
  
  
  
  
--======================== LCD DRIVER CORE ==============================--   
--                     STATE MACHINE WITH RESET                          -- 
--===================================================-----===============--  
process (clock_50, reset)
begin
        if reset = '0' then
           state <= reset1;
           data_bus_value <= x"38"; -- RESET
           next_command <= reset2;
           lcd_e <= '1';
           lcd_rs <= '0';
           lcd_rw_int <= '0';  
    
    
    
        elsif rising_edge(clock_50) then
             if clk_400hz_enable = '1' then  
                 
                 
                 
              --========================================================--                 
              -- State Machine to send commands and data to LCD DISPLAY
              --========================================================--
                 case state is
                 -- Set Function to 8-bit transfer and 2 line display with 5x8 Font size
                 -- see Hitachi HD44780 family data sheet for LCD command and timing details
                       
                       
                       
--======================= INITIALIZATION START ============================--
                       when reset1 =>
                            lcd_e <= '1';
                            lcd_rs <= '0';
                            lcd_rw_int <= '0';
                            data_bus_value <= x"38"; -- EXTERNAL RESET
                            state <= drop_lcd_e;
                            next_command <= reset2;
                            char_count <= "00000";
  
                       when reset2 =>
                            lcd_e <= '1';
                            lcd_rs <= '0';
                            lcd_rw_int <= '0';
                            data_bus_value <= x"38"; -- EXTERNAL RESET
                            state <= drop_lcd_e;
                            next_command <= reset3;
                            
                       when reset3 =>
                            lcd_e <= '1';
                            lcd_rs <= '0';
                            lcd_rw_int <= '0';
                            data_bus_value <= x"38"; -- EXTERNAL RESET
                            state <= drop_lcd_e;
                            next_command <= func_set;
            
            
                       -- Function Set
                       --==============--
                       when func_set =>                
                            lcd_e <= '1';
                            lcd_rs <= '0';
                            lcd_rw_int <= '0';
                            data_bus_value <= x"38";  -- Set Function to 8-bit transfer, 2 line display and a 5x8 Font size
                            state <= drop_lcd_e;
                            next_command <= display_off;
                            
                            
                            
                       -- Turn off Display
                       --==============-- 
                       when display_off =>
                            lcd_e <= '1';
                            lcd_rs <= '0';
                            lcd_rw_int <= '0';
                            data_bus_value <= x"08"; -- Turns OFF the Display, Cursor OFF and Blinking Cursor Position OFF.......(0F = Display ON and Cursor ON, Blinking cursor position ON)
                            state <= drop_lcd_e;
                            next_command <= display_clear;
                           
                           
                       -- Clear Display 
                       --==============--
                       when display_clear =>
                            lcd_e <= '1';
                            lcd_rs <= '0';
                            lcd_rw_int <= '0';
                            data_bus_value <= x"01"; -- Clears the Display    
                            state <= drop_lcd_e;
                            next_command <= display_on;
                           
                           
                           
                       -- Turn on Display and Turn off cursor
                       --===================================--
                       when display_on =>
                            lcd_e <= '1';
                            lcd_rs <= '0';
                            lcd_rw_int <= '0';
                            data_bus_value <= x"0C"; -- Turns on the Display (0E = Display ON, Cursor ON and Blinking cursor OFF) 
                            state <= drop_lcd_e;
                            next_command <= mode_set;
                          
                          
                       -- Set write mode to auto increment address and move cursor to the right
                       --====================================================================--
                       when mode_set =>
                            lcd_e <= '1';
                            lcd_rs <= '0';
                            lcd_rw_int <= '0';
                            data_bus_value <= x"06"; -- Auto increment address and move cursor to the right
                            state <= drop_lcd_e;
                            next_command <= print_string; 
                            
                                
--======================= INITIALIZATION END ============================--                          
                          
                          
                          
                          
--=======================================================================--                           
--               Write ASCII hex character Data to the LCD
--=======================================================================--
                       when print_string =>          
                            state <= drop_lcd_e;
                            lcd_e <= '1';
                            lcd_rs <= '1';
                            lcd_rw_int <= '0';
                          
                          
                               -- ASCII character to output
                               if (next_char(7 downto 4) /= x"0") then
                                  data_bus_value <= next_char;
                               else
                             
                                    -- Convert 4-bit value to an ASCII hex digit
                                    if next_char(3 downto 0) >9 then 
                              
                                    -- ASCII A...F
                                      data_bus_value <= x"4" & (next_char(3 downto 0)-9); 
                                    else 
                                
                                    -- ASCII 0...9
                                      data_bus_value <= x"3" & next_char(3 downto 0);
                                    end if;
                               end if;
                          
                            state <= drop_lcd_e; 
                          
                          

                            -- Loop to send out 32 characters to LCD Display (16 by 2 lines)
                               if (char_count < 31) AND (next_char /= x"fe") then
                                   char_count <= char_count +1;                            
                               else
                                   char_count <= "00000";
                               end if;
                  
                  
                  
                            -- Jump to second line?
                               if char_count = 15 then 
                                  next_command <= line2;
                   
                   
                   
                            -- Return to first line?
                               elsif (char_count = 31) or (next_char = x"fe") then
                                     next_command <= return_home;
                               else 
                                     next_command <= print_string; 
                               end if; 
                 
                 
                 
                       -- Set write address to line 2 character 1
                       --======================================--
                       when line2 =>
                            lcd_e <= '1';
                            lcd_rs <= '0';
                            lcd_rw_int <= '0';
                            data_bus_value <= x"c0";
                            state <= drop_lcd_e;
                            next_command <= print_string;      
                     
                     
                       -- Return write address to first character position on line 1
                       --=========================================================--
                       when return_home =>
                            lcd_e <= '1';
                            lcd_rs <= '0';
                            lcd_rw_int <= '0';
                            data_bus_value <= x"80";
                            state <= drop_lcd_e;
                            next_command <= print_string; 
                    
                    
                    
                       -- The next states occur at the end of each command or data transfer to the LCD
                       -- Drop LCD E line - falling edge loads inst/data to LCD controller
                       --============================================================================--
                       when drop_lcd_e =>
                            lcd_e <= '0';
                            state <= hold;
                   
                       -- Hold LCD inst/data valid after falling edge of E line
                       --====================================================--
                       when hold =>
                            state <= next_command;
                            
                            lcd_on   <= '1';
                       end case;




             end if;-- CLOSING STATEMENT FOR "IF clk_400hz_enable = '1' THEN"
             
      end if;-- CLOSING STATEMENT FOR "IF reset = '0' THEN" 
      
end process;                                                            
  
END ARCHITECTURE LCD_DISPLAY_arch;


          
